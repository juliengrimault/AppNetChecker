<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSMethodSignature+EXTExtensions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSMethodSignature(EXTExtensions)</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>NSMethodSignature+EXT.h</DeclaredIn>
			
			<NodeRef refid="12"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSMethodSignature(EXTExtensions)/methodSignatureByInsertingType:atArgumentIndex:</TokenIdentifier>
			<Abstract type="html">Creates and returns a new method signature based off the receiver, but with
an additional argument of the given type at \a index. If \a index is greater
than the current number of arguments, the behavior is undefined.</Abstract>
			<DeclaredIn>NSMethodSignature+EXT.h</DeclaredIn>			
			
			<Declaration>- (NSMethodSignature *)methodSignatureByInsertingType:(const char *)type atArgumentIndex:(NSUInteger)index</Declaration>
			
			
			<Anchor>//api/name/methodSignatureByInsertingType:atArgumentIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSMethodSignature(EXTExtensions)/typeEncoding</TokenIdentifier>
			<Abstract type="html">Returns the Objective-C type encoding for this method signature, which
includes the return type and all arguments. The resultant string matches the
format of \c method_getTypeEncoding() and is suitable for passing to \c
class_addMethod() and similar facilities.</Abstract>
			<DeclaredIn>NSMethodSignature+EXT.h</DeclaredIn>			
			
			<Declaration>- (const char *)typeEncoding</Declaration>
			
			
			<Anchor>//api/name/typeEncoding</Anchor>
		</Token>
		
	</File>
</Tokens>