<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSDictionary+MTLHigherOrderAdditions.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSDictionary(MTLHigherOrderAdditions)</TokenIdentifier>
			<Abstract type="html">Higher-order functions for NSDictionary.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_filterEntriesUsingBlock:</TokenIdentifier>
			<Abstract type="html">Filters the keys and values of the receiver with the given predicate,
returning a new dictionary built from those entries.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)mtl_filterEntriesUsingBlock:(BOOL ( ^ ) ( id key , id value ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A predicate block that determines whether to include or exclude
a given key-value pair.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_filterEntriesUsingBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_filterEntriesWithOptions:usingBlock:</TokenIdentifier>
			<Abstract type="html">Filters the keys and values of the receiver with the given predicate,
according to the semantics of opts, returning a new dictionary built from
those entries.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)mtl_filterEntriesWithOptions:(NSEnumerationOptions)opts usingBlock:(BOOL ( ^ ) ( id key , id value ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>opts</Name>
					<Abstract type="html">A mask of NSEnumerationOptions to apply when filtering.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A predicate block that determines whether to include or exclude
a given key-value pair.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_filterEntriesWithOptions:usingBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_filterEntriesWithFailedEntries:usingBlock:</TokenIdentifier>
			<Abstract type="html">Returns an dictionary of filtered entries for which block returns YES,
and sets failedEntries to a dictionary of the entries for which block
returned NO.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)mtl_filterEntriesWithFailedEntries:(NSDictionary **)failedEntries usingBlock:(BOOL ( ^ ) ( id key , id value ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>failedEntries</Name>
					<Abstract type="html">If not NULL, this will be a collection of all the
entries for which block returned NO. If no entries failed, this will be
an empty dictionary.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A predicate with which to filter key-value pairs in the
receiver. If this block returns YES, the entry will be added to the
returned collection. If this block returns NO, the object will be added to
failedEntries.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_filterEntriesWithFailedEntries:usingBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_filterEntriesWithOptions:failedEntries:usingBlock:</TokenIdentifier>
			<Abstract type="html">Returns an dictionary of filtered entries for which block returns YES,
and sets failedEntries to a dictionary of the entries for which block
returned NO, applying opts while filtering.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)mtl_filterEntriesWithOptions:(NSEnumerationOptions)opts failedEntries:(NSDictionary **)failedEntries usingBlock:(BOOL ( ^ ) ( id key , id value ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>opts</Name>
					<Abstract type="html">A mask of NSEnumerationOptions to apply when filtering.</Abstract>
				</Parameter><Parameter>
					<Name>failedEntries</Name>
					<Abstract type="html">If not NULL, this will be a collection of all the
entries for which block returned NO. If no entries failed, this will be
an empty dictionary.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A predicate with which to filter key-value pairs in the
receiver. If this block returns YES, the entry will be added to the
returned collection. If this block returns NO, the object will be added to
failedEntries.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_filterEntriesWithOptions:failedEntries:usingBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_foldEntriesWithValue:usingBlock:</TokenIdentifier>
			<Abstract type="html">Reduces the receiver to a single value, using the given block.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (id)mtl_foldEntriesWithValue:(id)startingValue usingBlock:(id ( ^ ) ( id left , id rightKey , id rightValue ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>startingValue</Name>
					<Abstract type="html">The value to be combined with the first entry of the
receiver. If the receiver is empty, this is the value returned.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block that describes how to combine elements of the receiver.
If the receiver is empty, this block will never be invoked.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_foldEntriesWithValue:usingBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_mapValuesUsingBlock:</TokenIdentifier>
			<Abstract type="html">Transforms each value in the receiver with the given predicate, returning
a new dictionary built from the original keys and the transformed values.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)mtl_mapValuesUsingBlock:(id ( ^ ) ( id key , id value ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block with which to transform each value. The key and original
value from the receiver are passed in as the arguments.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_mapValuesUsingBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_mapValuesWithOptions:usingBlock:</TokenIdentifier>
			<Abstract type="html">Transforms each value in the receiver with the given predicate, according to
the semantics of opts, returning a new dictionary built from the original
keys and transformed values.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)mtl_mapValuesWithOptions:(NSEnumerationOptions)opts usingBlock:(id ( ^ ) ( id key , id value ))block</Declaration>
			<Parameters>
				<Parameter>
					<Name>opts</Name>
					<Abstract type="html">A mask of NSEnumerationOptions to apply when mapping.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block with which to transform each value. The key and original
value from the receiver are passed in as the arguments.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_mapValuesWithOptions:usingBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_keyOfEntryPassingTest:</TokenIdentifier>
			<Abstract type="html">Returns the key of an entry in the receiver that passes the given test, or
nil if no such entry exists.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (id)mtl_keyOfEntryPassingTest:(BOOL ( ^ ) ( id key , id obj , BOOL *stop ))predicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">The test to apply to each entry in the receiver. This block
should return whether the entry passed the test.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_keyOfEntryPassingTest:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSDictionary(MTLHigherOrderAdditions)/mtl_keyOfEntryWithOptions:passingTest:</TokenIdentifier>
			<Abstract type="html">Returns the key of an entry in the receiver that passes the given test, or
nil if no such entry exists.</Abstract>
			<DeclaredIn>NSDictionary+MTLHigherOrderAdditions.h</DeclaredIn>			
			
			<Declaration>- (id)mtl_keyOfEntryWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL ( ^ ) ( id key , id obj , BOOL *stop ))predicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>opts</Name>
					<Abstract type="html">A mask of NSEnumerationOptions to apply when enumerating.</Abstract>
				</Parameter><Parameter>
					<Name>predicate</Name>
					<Abstract type="html">The test to apply to each entry in the receiver. This block
should return whether the entry passed the test.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/mtl_keyOfEntryWithOptions:passingTest:</Anchor>
		</Token>
		
	</File>
</Tokens>